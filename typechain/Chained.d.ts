/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ChainedInterface extends ethers.utils.Interface {
  functions: {
    "activate()": FunctionFragment;
    "activateSuccessor(address)": FunctionFragment;
    "activationBlock()": FunctionFragment;
    "predecessorAddress()": FunctionFragment;
    "successorAddress()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "activate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "activateSuccessor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "activationBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "predecessorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "successorAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "activate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "activateSuccessor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "predecessorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "successorAddress",
    data: BytesLike
  ): Result;

  events: {
    "Activated(uint256)": EventFragment;
    "ActivatedSuccessor(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Activated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ActivatedSuccessor"): EventFragment;
}

export class Chained extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ChainedInterface;

  functions: {
    activate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "activate()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    activateSuccessor(
      successor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "activateSuccessor(address)"(
      successor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    activationBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "activationBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    predecessorAddress(overrides?: CallOverrides): Promise<[string]>;

    "predecessorAddress()"(overrides?: CallOverrides): Promise<[string]>;

    successorAddress(overrides?: CallOverrides): Promise<[string]>;

    "successorAddress()"(overrides?: CallOverrides): Promise<[string]>;
  };

  activate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "activate()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  activateSuccessor(
    successor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "activateSuccessor(address)"(
    successor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  activationBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "activationBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  predecessorAddress(overrides?: CallOverrides): Promise<string>;

  "predecessorAddress()"(overrides?: CallOverrides): Promise<string>;

  successorAddress(overrides?: CallOverrides): Promise<string>;

  "successorAddress()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    activate(overrides?: CallOverrides): Promise<void>;

    "activate()"(overrides?: CallOverrides): Promise<void>;

    activateSuccessor(
      successor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "activateSuccessor(address)"(
      successor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    activationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "activationBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    predecessorAddress(overrides?: CallOverrides): Promise<string>;

    "predecessorAddress()"(overrides?: CallOverrides): Promise<string>;

    successorAddress(overrides?: CallOverrides): Promise<string>;

    "successorAddress()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Activated(
      blockNumber: null
    ): TypedEventFilter<[BigNumber], { blockNumber: BigNumber }>;

    ActivatedSuccessor(
      blockNumber: null,
      successor: null
    ): TypedEventFilter<
      [BigNumber, string],
      { blockNumber: BigNumber; successor: string }
    >;
  };

  estimateGas: {
    activate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "activate()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    activateSuccessor(
      successor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "activateSuccessor(address)"(
      successor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    activationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "activationBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    predecessorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "predecessorAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    successorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "successorAddress()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    activate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "activate()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    activateSuccessor(
      successor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "activateSuccessor(address)"(
      successor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    activationBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "activationBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    predecessorAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "predecessorAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    successorAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "successorAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
