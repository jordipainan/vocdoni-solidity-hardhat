/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ProcessesInterface extends ethers.utils.Interface {
  functions: {
    "activate()": FunctionFragment;
    "activateSuccessor(address)": FunctionFragment;
    "activationBlock()": FunctionFragment;
    "ethChainId()": FunctionFragment;
    "get(bytes32)": FunctionFragment;
    "getCreationInstance(bytes32)": FunctionFragment;
    "getEntityProcessCount(address)": FunctionFragment;
    "getNextProcessId(address)": FunctionFragment;
    "getParamsSignature(bytes32)": FunctionFragment;
    "getProcessId(address,uint256,uint32,uint32)": FunctionFragment;
    "incrementQuestionIndex(bytes32)": FunctionFragment;
    "namespaceAddress()": FunctionFragment;
    "namespaceId()": FunctionFragment;
    "newProcess(uint8[3],address,string[3],uint32[2],uint8[4],uint16[2],uint256,bytes32)": FunctionFragment;
    "predecessorAddress()": FunctionFragment;
    "processPrice()": FunctionFragment;
    "resultsAddress()": FunctionFragment;
    "setCensus(bytes32,string,string)": FunctionFragment;
    "setProcessPrice(uint256)": FunctionFragment;
    "setStatus(bytes32,uint8)": FunctionFragment;
    "successorAddress()": FunctionFragment;
    "tokenStorageProofAddress()": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "activate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "activateSuccessor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "activationBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ethChainId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "get", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getCreationInstance",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntityProcessCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextProcessId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getParamsSignature",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProcessId",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "incrementQuestionIndex",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "namespaceAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "namespaceId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newProcess",
    values: [
      [BigNumberish, BigNumberish, BigNumberish],
      string,
      [string, string, string],
      [BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish],
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "predecessorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "processPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resultsAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCensus",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setProcessPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStatus",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "successorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenStorageProofAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "activate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "activateSuccessor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ethChainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCreationInstance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntityProcessCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextProcessId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParamsSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProcessId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementQuestionIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "namespaceAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "namespaceId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newProcess", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "predecessorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resultsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setCensus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProcessPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setStatus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "successorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenStorageProofAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Activated(uint256)": EventFragment;
    "ActivatedSuccessor(uint256,address)": EventFragment;
    "CensusUpdated(bytes32,uint32)": EventFragment;
    "NewProcess(bytes32,uint32)": EventFragment;
    "ProcessPriceUpdated(uint256)": EventFragment;
    "QuestionIndexUpdated(bytes32,uint32,uint8)": EventFragment;
    "StatusUpdated(bytes32,uint32,uint8)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Activated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ActivatedSuccessor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CensusUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewProcess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProcessPriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuestionIndexUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StatusUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class Processes extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ProcessesInterface;

  functions: {
    activate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "activate()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    activateSuccessor(
      successor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "activateSuccessor(address)"(
      successor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    activationBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "activationBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    ethChainId(overrides?: CallOverrides): Promise<[number]>;

    "ethChainId()"(overrides?: CallOverrides): Promise<[number]>;

    get(
      processId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [number, number, number],
        string,
        [string, string, string],
        [number, number],
        number,
        [number, number, number, number, number],
        [number, number],
        BigNumber
      ] & {
        mode_envelopeType_censusOrigin: [number, number, number];
        entityAddress: string;
        metadata_censusRoot_censusUri: [string, string, string];
        startBlock_blockCount: [number, number];
        status: number;
        questionIndex_questionCount_maxCount_maxValue_maxVoteOverwrites: [
          number,
          number,
          number,
          number,
          number
        ];
        maxTotalCost_costExponent: [number, number];
        evmBlockHeight: BigNumber;
      }
    >;

    "get(bytes32)"(
      processId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [number, number, number],
        string,
        [string, string, string],
        [number, number],
        number,
        [number, number, number, number, number],
        [number, number],
        BigNumber
      ] & {
        mode_envelopeType_censusOrigin: [number, number, number];
        entityAddress: string;
        metadata_censusRoot_censusUri: [string, string, string];
        startBlock_blockCount: [number, number];
        status: number;
        questionIndex_questionCount_maxCount_maxValue_maxVoteOverwrites: [
          number,
          number,
          number,
          number,
          number
        ];
        maxTotalCost_costExponent: [number, number];
        evmBlockHeight: BigNumber;
      }
    >;

    getCreationInstance(
      processId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getCreationInstance(bytes32)"(
      processId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getEntityProcessCount(
      entityAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getEntityProcessCount(address)"(
      entityAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNextProcessId(
      entityAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getNextProcessId(address)"(
      entityAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getParamsSignature(
      processId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getParamsSignature(bytes32)"(
      processId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getProcessId(
      entityAddress: string,
      processCountIndex: BigNumberish,
      namespaceIdNum: BigNumberish,
      ethereumChainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getProcessId(address,uint256,uint32,uint32)"(
      entityAddress: string,
      processCountIndex: BigNumberish,
      namespaceIdNum: BigNumberish,
      ethereumChainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    incrementQuestionIndex(
      processId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "incrementQuestionIndex(bytes32)"(
      processId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    namespaceAddress(overrides?: CallOverrides): Promise<[string]>;

    "namespaceAddress()"(overrides?: CallOverrides): Promise<[string]>;

    namespaceId(overrides?: CallOverrides): Promise<[number]>;

    "namespaceId()"(overrides?: CallOverrides): Promise<[number]>;

    newProcess(
      mode_envelopeType_censusOrigin: [
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      tokenContractAddress: string,
      metadata_censusRoot_censusUri: [string, string, string],
      startBlock_blockCount: [BigNumberish, BigNumberish],
      questionCount_maxCount_maxValue_maxVoteOverwrites: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxTotalCost_costExponent: [BigNumberish, BigNumberish],
      evmBlockHeight: BigNumberish,
      paramsSignature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "newProcess(uint8[3],address,string[3],uint32[2],uint8[4],uint16[2],uint256,bytes32)"(
      mode_envelopeType_censusOrigin: [
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      tokenContractAddress: string,
      metadata_censusRoot_censusUri: [string, string, string],
      startBlock_blockCount: [BigNumberish, BigNumberish],
      questionCount_maxCount_maxValue_maxVoteOverwrites: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxTotalCost_costExponent: [BigNumberish, BigNumberish],
      evmBlockHeight: BigNumberish,
      paramsSignature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    predecessorAddress(overrides?: CallOverrides): Promise<[string]>;

    "predecessorAddress()"(overrides?: CallOverrides): Promise<[string]>;

    processPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "processPrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    resultsAddress(overrides?: CallOverrides): Promise<[string]>;

    "resultsAddress()"(overrides?: CallOverrides): Promise<[string]>;

    setCensus(
      processId: BytesLike,
      censusRoot: string,
      censusUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setCensus(bytes32,string,string)"(
      processId: BytesLike,
      censusRoot: string,
      censusUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProcessPrice(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setProcessPrice(uint256)"(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStatus(
      processId: BytesLike,
      newStatus: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setStatus(bytes32,uint8)"(
      processId: BytesLike,
      newStatus: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    successorAddress(overrides?: CallOverrides): Promise<[string]>;

    "successorAddress()"(overrides?: CallOverrides): Promise<[string]>;

    tokenStorageProofAddress(overrides?: CallOverrides): Promise<[string]>;

    "tokenStorageProofAddress()"(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  activate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "activate()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  activateSuccessor(
    successor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "activateSuccessor(address)"(
    successor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  activationBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "activationBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  ethChainId(overrides?: CallOverrides): Promise<number>;

  "ethChainId()"(overrides?: CallOverrides): Promise<number>;

  get(
    processId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      [number, number, number],
      string,
      [string, string, string],
      [number, number],
      number,
      [number, number, number, number, number],
      [number, number],
      BigNumber
    ] & {
      mode_envelopeType_censusOrigin: [number, number, number];
      entityAddress: string;
      metadata_censusRoot_censusUri: [string, string, string];
      startBlock_blockCount: [number, number];
      status: number;
      questionIndex_questionCount_maxCount_maxValue_maxVoteOverwrites: [
        number,
        number,
        number,
        number,
        number
      ];
      maxTotalCost_costExponent: [number, number];
      evmBlockHeight: BigNumber;
    }
  >;

  "get(bytes32)"(
    processId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      [number, number, number],
      string,
      [string, string, string],
      [number, number],
      number,
      [number, number, number, number, number],
      [number, number],
      BigNumber
    ] & {
      mode_envelopeType_censusOrigin: [number, number, number];
      entityAddress: string;
      metadata_censusRoot_censusUri: [string, string, string];
      startBlock_blockCount: [number, number];
      status: number;
      questionIndex_questionCount_maxCount_maxValue_maxVoteOverwrites: [
        number,
        number,
        number,
        number,
        number
      ];
      maxTotalCost_costExponent: [number, number];
      evmBlockHeight: BigNumber;
    }
  >;

  getCreationInstance(
    processId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getCreationInstance(bytes32)"(
    processId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getEntityProcessCount(
    entityAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getEntityProcessCount(address)"(
    entityAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNextProcessId(
    entityAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "getNextProcessId(address)"(
    entityAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getParamsSignature(
    processId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getParamsSignature(bytes32)"(
    processId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getProcessId(
    entityAddress: string,
    processCountIndex: BigNumberish,
    namespaceIdNum: BigNumberish,
    ethereumChainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getProcessId(address,uint256,uint32,uint32)"(
    entityAddress: string,
    processCountIndex: BigNumberish,
    namespaceIdNum: BigNumberish,
    ethereumChainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  incrementQuestionIndex(
    processId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "incrementQuestionIndex(bytes32)"(
    processId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  namespaceAddress(overrides?: CallOverrides): Promise<string>;

  "namespaceAddress()"(overrides?: CallOverrides): Promise<string>;

  namespaceId(overrides?: CallOverrides): Promise<number>;

  "namespaceId()"(overrides?: CallOverrides): Promise<number>;

  newProcess(
    mode_envelopeType_censusOrigin: [BigNumberish, BigNumberish, BigNumberish],
    tokenContractAddress: string,
    metadata_censusRoot_censusUri: [string, string, string],
    startBlock_blockCount: [BigNumberish, BigNumberish],
    questionCount_maxCount_maxValue_maxVoteOverwrites: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    maxTotalCost_costExponent: [BigNumberish, BigNumberish],
    evmBlockHeight: BigNumberish,
    paramsSignature: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "newProcess(uint8[3],address,string[3],uint32[2],uint8[4],uint16[2],uint256,bytes32)"(
    mode_envelopeType_censusOrigin: [BigNumberish, BigNumberish, BigNumberish],
    tokenContractAddress: string,
    metadata_censusRoot_censusUri: [string, string, string],
    startBlock_blockCount: [BigNumberish, BigNumberish],
    questionCount_maxCount_maxValue_maxVoteOverwrites: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    maxTotalCost_costExponent: [BigNumberish, BigNumberish],
    evmBlockHeight: BigNumberish,
    paramsSignature: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  predecessorAddress(overrides?: CallOverrides): Promise<string>;

  "predecessorAddress()"(overrides?: CallOverrides): Promise<string>;

  processPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "processPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  resultsAddress(overrides?: CallOverrides): Promise<string>;

  "resultsAddress()"(overrides?: CallOverrides): Promise<string>;

  setCensus(
    processId: BytesLike,
    censusRoot: string,
    censusUri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setCensus(bytes32,string,string)"(
    processId: BytesLike,
    censusRoot: string,
    censusUri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProcessPrice(
    newPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setProcessPrice(uint256)"(
    newPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStatus(
    processId: BytesLike,
    newStatus: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setStatus(bytes32,uint8)"(
    processId: BytesLike,
    newStatus: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  successorAddress(overrides?: CallOverrides): Promise<string>;

  "successorAddress()"(overrides?: CallOverrides): Promise<string>;

  tokenStorageProofAddress(overrides?: CallOverrides): Promise<string>;

  "tokenStorageProofAddress()"(overrides?: CallOverrides): Promise<string>;

  withdraw(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(address,uint256)"(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activate(overrides?: CallOverrides): Promise<void>;

    "activate()"(overrides?: CallOverrides): Promise<void>;

    activateSuccessor(
      successor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "activateSuccessor(address)"(
      successor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    activationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "activationBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    ethChainId(overrides?: CallOverrides): Promise<number>;

    "ethChainId()"(overrides?: CallOverrides): Promise<number>;

    get(
      processId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [number, number, number],
        string,
        [string, string, string],
        [number, number],
        number,
        [number, number, number, number, number],
        [number, number],
        BigNumber
      ] & {
        mode_envelopeType_censusOrigin: [number, number, number];
        entityAddress: string;
        metadata_censusRoot_censusUri: [string, string, string];
        startBlock_blockCount: [number, number];
        status: number;
        questionIndex_questionCount_maxCount_maxValue_maxVoteOverwrites: [
          number,
          number,
          number,
          number,
          number
        ];
        maxTotalCost_costExponent: [number, number];
        evmBlockHeight: BigNumber;
      }
    >;

    "get(bytes32)"(
      processId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [number, number, number],
        string,
        [string, string, string],
        [number, number],
        number,
        [number, number, number, number, number],
        [number, number],
        BigNumber
      ] & {
        mode_envelopeType_censusOrigin: [number, number, number];
        entityAddress: string;
        metadata_censusRoot_censusUri: [string, string, string];
        startBlock_blockCount: [number, number];
        status: number;
        questionIndex_questionCount_maxCount_maxValue_maxVoteOverwrites: [
          number,
          number,
          number,
          number,
          number
        ];
        maxTotalCost_costExponent: [number, number];
        evmBlockHeight: BigNumber;
      }
    >;

    getCreationInstance(
      processId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getCreationInstance(bytes32)"(
      processId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getEntityProcessCount(
      entityAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEntityProcessCount(address)"(
      entityAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextProcessId(
      entityAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getNextProcessId(address)"(
      entityAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getParamsSignature(
      processId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getParamsSignature(bytes32)"(
      processId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getProcessId(
      entityAddress: string,
      processCountIndex: BigNumberish,
      namespaceIdNum: BigNumberish,
      ethereumChainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getProcessId(address,uint256,uint32,uint32)"(
      entityAddress: string,
      processCountIndex: BigNumberish,
      namespaceIdNum: BigNumberish,
      ethereumChainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    incrementQuestionIndex(
      processId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "incrementQuestionIndex(bytes32)"(
      processId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    namespaceAddress(overrides?: CallOverrides): Promise<string>;

    "namespaceAddress()"(overrides?: CallOverrides): Promise<string>;

    namespaceId(overrides?: CallOverrides): Promise<number>;

    "namespaceId()"(overrides?: CallOverrides): Promise<number>;

    newProcess(
      mode_envelopeType_censusOrigin: [
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      tokenContractAddress: string,
      metadata_censusRoot_censusUri: [string, string, string],
      startBlock_blockCount: [BigNumberish, BigNumberish],
      questionCount_maxCount_maxValue_maxVoteOverwrites: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxTotalCost_costExponent: [BigNumberish, BigNumberish],
      evmBlockHeight: BigNumberish,
      paramsSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "newProcess(uint8[3],address,string[3],uint32[2],uint8[4],uint16[2],uint256,bytes32)"(
      mode_envelopeType_censusOrigin: [
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      tokenContractAddress: string,
      metadata_censusRoot_censusUri: [string, string, string],
      startBlock_blockCount: [BigNumberish, BigNumberish],
      questionCount_maxCount_maxValue_maxVoteOverwrites: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxTotalCost_costExponent: [BigNumberish, BigNumberish],
      evmBlockHeight: BigNumberish,
      paramsSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    predecessorAddress(overrides?: CallOverrides): Promise<string>;

    "predecessorAddress()"(overrides?: CallOverrides): Promise<string>;

    processPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "processPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    resultsAddress(overrides?: CallOverrides): Promise<string>;

    "resultsAddress()"(overrides?: CallOverrides): Promise<string>;

    setCensus(
      processId: BytesLike,
      censusRoot: string,
      censusUri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCensus(bytes32,string,string)"(
      processId: BytesLike,
      censusRoot: string,
      censusUri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setProcessPrice(
      newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setProcessPrice(uint256)"(
      newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStatus(
      processId: BytesLike,
      newStatus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setStatus(bytes32,uint8)"(
      processId: BytesLike,
      newStatus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    successorAddress(overrides?: CallOverrides): Promise<string>;

    "successorAddress()"(overrides?: CallOverrides): Promise<string>;

    tokenStorageProofAddress(overrides?: CallOverrides): Promise<string>;

    "tokenStorageProofAddress()"(overrides?: CallOverrides): Promise<string>;

    withdraw(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Activated(
      blockNumber: null
    ): TypedEventFilter<[BigNumber], { blockNumber: BigNumber }>;

    ActivatedSuccessor(
      blockNumber: null,
      successor: null
    ): TypedEventFilter<
      [BigNumber, string],
      { blockNumber: BigNumber; successor: string }
    >;

    CensusUpdated(
      processId: null,
      namespace: null
    ): TypedEventFilter<
      [string, number],
      { processId: string; namespace: number }
    >;

    NewProcess(
      processId: null,
      namespace: null
    ): TypedEventFilter<
      [string, number],
      { processId: string; namespace: number }
    >;

    ProcessPriceUpdated(
      processPrice: null
    ): TypedEventFilter<[BigNumber], { processPrice: BigNumber }>;

    QuestionIndexUpdated(
      processId: null,
      namespace: null,
      newIndex: null
    ): TypedEventFilter<
      [string, number, number],
      { processId: string; namespace: number; newIndex: number }
    >;

    StatusUpdated(
      processId: null,
      namespace: null,
      status: null
    ): TypedEventFilter<
      [string, number, number],
      { processId: string; namespace: number; status: number }
    >;

    Withdraw(
      to: null,
      amount: null
    ): TypedEventFilter<[string, BigNumber], { to: string; amount: BigNumber }>;
  };

  estimateGas: {
    activate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "activate()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    activateSuccessor(
      successor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "activateSuccessor(address)"(
      successor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    activationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "activationBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    ethChainId(overrides?: CallOverrides): Promise<BigNumber>;

    "ethChainId()"(overrides?: CallOverrides): Promise<BigNumber>;

    get(processId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "get(bytes32)"(
      processId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreationInstance(
      processId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCreationInstance(bytes32)"(
      processId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntityProcessCount(
      entityAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEntityProcessCount(address)"(
      entityAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextProcessId(
      entityAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNextProcessId(address)"(
      entityAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getParamsSignature(
      processId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getParamsSignature(bytes32)"(
      processId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProcessId(
      entityAddress: string,
      processCountIndex: BigNumberish,
      namespaceIdNum: BigNumberish,
      ethereumChainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getProcessId(address,uint256,uint32,uint32)"(
      entityAddress: string,
      processCountIndex: BigNumberish,
      namespaceIdNum: BigNumberish,
      ethereumChainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incrementQuestionIndex(
      processId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "incrementQuestionIndex(bytes32)"(
      processId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    namespaceAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "namespaceAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    namespaceId(overrides?: CallOverrides): Promise<BigNumber>;

    "namespaceId()"(overrides?: CallOverrides): Promise<BigNumber>;

    newProcess(
      mode_envelopeType_censusOrigin: [
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      tokenContractAddress: string,
      metadata_censusRoot_censusUri: [string, string, string],
      startBlock_blockCount: [BigNumberish, BigNumberish],
      questionCount_maxCount_maxValue_maxVoteOverwrites: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxTotalCost_costExponent: [BigNumberish, BigNumberish],
      evmBlockHeight: BigNumberish,
      paramsSignature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "newProcess(uint8[3],address,string[3],uint32[2],uint8[4],uint16[2],uint256,bytes32)"(
      mode_envelopeType_censusOrigin: [
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      tokenContractAddress: string,
      metadata_censusRoot_censusUri: [string, string, string],
      startBlock_blockCount: [BigNumberish, BigNumberish],
      questionCount_maxCount_maxValue_maxVoteOverwrites: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxTotalCost_costExponent: [BigNumberish, BigNumberish],
      evmBlockHeight: BigNumberish,
      paramsSignature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    predecessorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "predecessorAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    processPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "processPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    resultsAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "resultsAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    setCensus(
      processId: BytesLike,
      censusRoot: string,
      censusUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setCensus(bytes32,string,string)"(
      processId: BytesLike,
      censusRoot: string,
      censusUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProcessPrice(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setProcessPrice(uint256)"(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStatus(
      processId: BytesLike,
      newStatus: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setStatus(bytes32,uint8)"(
      processId: BytesLike,
      newStatus: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    successorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "successorAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenStorageProofAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenStorageProofAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "activate()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    activateSuccessor(
      successor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "activateSuccessor(address)"(
      successor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    activationBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "activationBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ethChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ethChainId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get(
      processId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "get(bytes32)"(
      processId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreationInstance(
      processId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCreationInstance(bytes32)"(
      processId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEntityProcessCount(
      entityAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEntityProcessCount(address)"(
      entityAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextProcessId(
      entityAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNextProcessId(address)"(
      entityAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getParamsSignature(
      processId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getParamsSignature(bytes32)"(
      processId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProcessId(
      entityAddress: string,
      processCountIndex: BigNumberish,
      namespaceIdNum: BigNumberish,
      ethereumChainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProcessId(address,uint256,uint32,uint32)"(
      entityAddress: string,
      processCountIndex: BigNumberish,
      namespaceIdNum: BigNumberish,
      ethereumChainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incrementQuestionIndex(
      processId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "incrementQuestionIndex(bytes32)"(
      processId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    namespaceAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "namespaceAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    namespaceId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "namespaceId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newProcess(
      mode_envelopeType_censusOrigin: [
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      tokenContractAddress: string,
      metadata_censusRoot_censusUri: [string, string, string],
      startBlock_blockCount: [BigNumberish, BigNumberish],
      questionCount_maxCount_maxValue_maxVoteOverwrites: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxTotalCost_costExponent: [BigNumberish, BigNumberish],
      evmBlockHeight: BigNumberish,
      paramsSignature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "newProcess(uint8[3],address,string[3],uint32[2],uint8[4],uint16[2],uint256,bytes32)"(
      mode_envelopeType_censusOrigin: [
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      tokenContractAddress: string,
      metadata_censusRoot_censusUri: [string, string, string],
      startBlock_blockCount: [BigNumberish, BigNumberish],
      questionCount_maxCount_maxValue_maxVoteOverwrites: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxTotalCost_costExponent: [BigNumberish, BigNumberish],
      evmBlockHeight: BigNumberish,
      paramsSignature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    predecessorAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "predecessorAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "processPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    resultsAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "resultsAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCensus(
      processId: BytesLike,
      censusRoot: string,
      censusUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setCensus(bytes32,string,string)"(
      processId: BytesLike,
      censusRoot: string,
      censusUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProcessPrice(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setProcessPrice(uint256)"(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStatus(
      processId: BytesLike,
      newStatus: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setStatus(bytes32,uint8)"(
      processId: BytesLike,
      newStatus: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    successorAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "successorAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenStorageProofAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenStorageProofAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
