/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IResultsStoreInterface extends ethers.utils.Interface {
  functions: {
    "getResults(bytes32)": FunctionFragment;
    "setProcessesAddress(address)": FunctionFragment;
    "setResults(bytes32,uint32[][],uint32,uint32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getResults",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setProcessesAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setResults",
    values: [BytesLike, BigNumberish[][], BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "getResults", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProcessesAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setResults", data: BytesLike): Result;

  events: {
    "ResultsAvailable(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ResultsAvailable"): EventFragment;
}

export class IResultsStore extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IResultsStoreInterface;

  functions: {
    getResults(
      processId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number[][], number] & { tally: number[][]; height: number }>;

    "getResults(bytes32)"(
      processId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number[][], number] & { tally: number[][]; height: number }>;

    setProcessesAddress(
      processesAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setProcessesAddress(address)"(
      processesAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setResults(
      processId: BytesLike,
      tally: BigNumberish[][],
      height: BigNumberish,
      vochainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setResults(bytes32,uint32[][],uint32,uint32)"(
      processId: BytesLike,
      tally: BigNumberish[][],
      height: BigNumberish,
      vochainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getResults(
    processId: BytesLike,
    overrides?: CallOverrides
  ): Promise<[number[][], number] & { tally: number[][]; height: number }>;

  "getResults(bytes32)"(
    processId: BytesLike,
    overrides?: CallOverrides
  ): Promise<[number[][], number] & { tally: number[][]; height: number }>;

  setProcessesAddress(
    processesAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setProcessesAddress(address)"(
    processesAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setResults(
    processId: BytesLike,
    tally: BigNumberish[][],
    height: BigNumberish,
    vochainId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setResults(bytes32,uint32[][],uint32,uint32)"(
    processId: BytesLike,
    tally: BigNumberish[][],
    height: BigNumberish,
    vochainId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getResults(
      processId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number[][], number] & { tally: number[][]; height: number }>;

    "getResults(bytes32)"(
      processId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number[][], number] & { tally: number[][]; height: number }>;

    setProcessesAddress(
      processesAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setProcessesAddress(address)"(
      processesAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setResults(
      processId: BytesLike,
      tally: BigNumberish[][],
      height: BigNumberish,
      vochainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setResults(bytes32,uint32[][],uint32,uint32)"(
      processId: BytesLike,
      tally: BigNumberish[][],
      height: BigNumberish,
      vochainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ResultsAvailable(
      processId: null
    ): TypedEventFilter<[string], { processId: string }>;
  };

  estimateGas: {
    getResults(
      processId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getResults(bytes32)"(
      processId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setProcessesAddress(
      processesAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setProcessesAddress(address)"(
      processesAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setResults(
      processId: BytesLike,
      tally: BigNumberish[][],
      height: BigNumberish,
      vochainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setResults(bytes32,uint32[][],uint32,uint32)"(
      processId: BytesLike,
      tally: BigNumberish[][],
      height: BigNumberish,
      vochainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getResults(
      processId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getResults(bytes32)"(
      processId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setProcessesAddress(
      processesAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setProcessesAddress(address)"(
      processesAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setResults(
      processId: BytesLike,
      tally: BigNumberish[][],
      height: BigNumberish,
      vochainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setResults(bytes32,uint32[][],uint32,uint32)"(
      processId: BytesLike,
      tally: BigNumberish[][],
      height: BigNumberish,
      vochainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
