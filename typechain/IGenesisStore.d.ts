/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IGenesisStoreInterface extends ethers.utils.Interface {
  functions: {
    "addOracle(uint32,address)": FunctionFragment;
    "addValidator(uint32,bytes)": FunctionFragment;
    "get(uint32)": FunctionFragment;
    "getChainCount()": FunctionFragment;
    "isOracle(uint32,address)": FunctionFragment;
    "isValidator(uint32,bytes)": FunctionFragment;
    "newChain(string,bytes[],address[])": FunctionFragment;
    "removeOracle(uint32,uint256,address)": FunctionFragment;
    "removeValidator(uint32,uint256,bytes)": FunctionFragment;
    "setGenesis(uint32,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addOracle",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addValidator",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "get", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getChainCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isOracle",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidator",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "newChain",
    values: [string, BytesLike[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOracle",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeValidator",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGenesis",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "addOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getChainCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newChain", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGenesis", data: BytesLike): Result;

  events: {
    "ChainRegistered(uint32)": EventFragment;
    "GenesisUpdated(uint32)": EventFragment;
    "OracleAdded(uint32,address)": EventFragment;
    "OracleRemoved(uint32,address)": EventFragment;
    "ValidatorAdded(uint32,bytes)": EventFragment;
    "ValidatorRemoved(uint32,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChainRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GenesisUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorRemoved"): EventFragment;
}

export class IGenesisStore extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IGenesisStoreInterface;

  functions: {
    addOracle(
      chainId: BigNumberish,
      oracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addOracle(uint32,address)"(
      chainId: BigNumberish,
      oracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addValidator(
      chainId: BigNumberish,
      validatorPublicKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addValidator(uint32,bytes)"(
      chainId: BigNumberish,
      validatorPublicKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    get(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string[], string[]] & {
        genesis: string;
        validators: string[];
        oracles: string[];
      }
    >;

    "get(uint32)"(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string[], string[]] & {
        genesis: string;
        validators: string[];
        oracles: string[];
      }
    >;

    getChainCount(overrides?: CallOverrides): Promise<[number]>;

    "getChainCount()"(overrides?: CallOverrides): Promise<[number]>;

    isOracle(
      chainId: BigNumberish,
      oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isOracle(uint32,address)"(
      chainId: BigNumberish,
      oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidator(
      chainId: BigNumberish,
      validatorPublicKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isValidator(uint32,bytes)"(
      chainId: BigNumberish,
      validatorPublicKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    newChain(
      genesis: string,
      validators: BytesLike[],
      oracles: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "newChain(string,bytes[],address[])"(
      genesis: string,
      validators: BytesLike[],
      oracles: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeOracle(
      chainId: BigNumberish,
      idx: BigNumberish,
      oracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeOracle(uint32,uint256,address)"(
      chainId: BigNumberish,
      idx: BigNumberish,
      oracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeValidator(
      chainId: BigNumberish,
      idx: BigNumberish,
      validatorPublicKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeValidator(uint32,uint256,bytes)"(
      chainId: BigNumberish,
      idx: BigNumberish,
      validatorPublicKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGenesis(
      chainId: BigNumberish,
      newGenesis: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setGenesis(uint32,string)"(
      chainId: BigNumberish,
      newGenesis: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addOracle(
    chainId: BigNumberish,
    oracleAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addOracle(uint32,address)"(
    chainId: BigNumberish,
    oracleAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addValidator(
    chainId: BigNumberish,
    validatorPublicKey: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addValidator(uint32,bytes)"(
    chainId: BigNumberish,
    validatorPublicKey: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  get(
    chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string[], string[]] & {
      genesis: string;
      validators: string[];
      oracles: string[];
    }
  >;

  "get(uint32)"(
    chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string[], string[]] & {
      genesis: string;
      validators: string[];
      oracles: string[];
    }
  >;

  getChainCount(overrides?: CallOverrides): Promise<number>;

  "getChainCount()"(overrides?: CallOverrides): Promise<number>;

  isOracle(
    chainId: BigNumberish,
    oracleAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isOracle(uint32,address)"(
    chainId: BigNumberish,
    oracleAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidator(
    chainId: BigNumberish,
    validatorPublicKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isValidator(uint32,bytes)"(
    chainId: BigNumberish,
    validatorPublicKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  newChain(
    genesis: string,
    validators: BytesLike[],
    oracles: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "newChain(string,bytes[],address[])"(
    genesis: string,
    validators: BytesLike[],
    oracles: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeOracle(
    chainId: BigNumberish,
    idx: BigNumberish,
    oracleAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeOracle(uint32,uint256,address)"(
    chainId: BigNumberish,
    idx: BigNumberish,
    oracleAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeValidator(
    chainId: BigNumberish,
    idx: BigNumberish,
    validatorPublicKey: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeValidator(uint32,uint256,bytes)"(
    chainId: BigNumberish,
    idx: BigNumberish,
    validatorPublicKey: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGenesis(
    chainId: BigNumberish,
    newGenesis: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setGenesis(uint32,string)"(
    chainId: BigNumberish,
    newGenesis: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addOracle(
      chainId: BigNumberish,
      oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addOracle(uint32,address)"(
      chainId: BigNumberish,
      oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addValidator(
      chainId: BigNumberish,
      validatorPublicKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "addValidator(uint32,bytes)"(
      chainId: BigNumberish,
      validatorPublicKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    get(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string[], string[]] & {
        genesis: string;
        validators: string[];
        oracles: string[];
      }
    >;

    "get(uint32)"(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string[], string[]] & {
        genesis: string;
        validators: string[];
        oracles: string[];
      }
    >;

    getChainCount(overrides?: CallOverrides): Promise<number>;

    "getChainCount()"(overrides?: CallOverrides): Promise<number>;

    isOracle(
      chainId: BigNumberish,
      oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isOracle(uint32,address)"(
      chainId: BigNumberish,
      oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidator(
      chainId: BigNumberish,
      validatorPublicKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isValidator(uint32,bytes)"(
      chainId: BigNumberish,
      validatorPublicKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    newChain(
      genesis: string,
      validators: BytesLike[],
      oracles: string[],
      overrides?: CallOverrides
    ): Promise<number>;

    "newChain(string,bytes[],address[])"(
      genesis: string,
      validators: BytesLike[],
      oracles: string[],
      overrides?: CallOverrides
    ): Promise<number>;

    removeOracle(
      chainId: BigNumberish,
      idx: BigNumberish,
      oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeOracle(uint32,uint256,address)"(
      chainId: BigNumberish,
      idx: BigNumberish,
      oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeValidator(
      chainId: BigNumberish,
      idx: BigNumberish,
      validatorPublicKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeValidator(uint32,uint256,bytes)"(
      chainId: BigNumberish,
      idx: BigNumberish,
      validatorPublicKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setGenesis(
      chainId: BigNumberish,
      newGenesis: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setGenesis(uint32,string)"(
      chainId: BigNumberish,
      newGenesis: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ChainRegistered(
      chainId: null
    ): TypedEventFilter<[number], { chainId: number }>;

    GenesisUpdated(
      chainId: null
    ): TypedEventFilter<[number], { chainId: number }>;

    OracleAdded(
      chainId: null,
      oracleAddress: null
    ): TypedEventFilter<
      [number, string],
      { chainId: number; oracleAddress: string }
    >;

    OracleRemoved(
      chainId: null,
      oracleAddress: null
    ): TypedEventFilter<
      [number, string],
      { chainId: number; oracleAddress: string }
    >;

    ValidatorAdded(
      chainId: null,
      validatorPublicKey: null
    ): TypedEventFilter<
      [number, string],
      { chainId: number; validatorPublicKey: string }
    >;

    ValidatorRemoved(
      chainId: null,
      validatorPublicKey: null
    ): TypedEventFilter<
      [number, string],
      { chainId: number; validatorPublicKey: string }
    >;
  };

  estimateGas: {
    addOracle(
      chainId: BigNumberish,
      oracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addOracle(uint32,address)"(
      chainId: BigNumberish,
      oracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addValidator(
      chainId: BigNumberish,
      validatorPublicKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addValidator(uint32,bytes)"(
      chainId: BigNumberish,
      validatorPublicKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    get(chainId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "get(uint32)"(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getChainCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    isOracle(
      chainId: BigNumberish,
      oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isOracle(uint32,address)"(
      chainId: BigNumberish,
      oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidator(
      chainId: BigNumberish,
      validatorPublicKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isValidator(uint32,bytes)"(
      chainId: BigNumberish,
      validatorPublicKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newChain(
      genesis: string,
      validators: BytesLike[],
      oracles: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "newChain(string,bytes[],address[])"(
      genesis: string,
      validators: BytesLike[],
      oracles: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeOracle(
      chainId: BigNumberish,
      idx: BigNumberish,
      oracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeOracle(uint32,uint256,address)"(
      chainId: BigNumberish,
      idx: BigNumberish,
      oracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeValidator(
      chainId: BigNumberish,
      idx: BigNumberish,
      validatorPublicKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeValidator(uint32,uint256,bytes)"(
      chainId: BigNumberish,
      idx: BigNumberish,
      validatorPublicKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGenesis(
      chainId: BigNumberish,
      newGenesis: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setGenesis(uint32,string)"(
      chainId: BigNumberish,
      newGenesis: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addOracle(
      chainId: BigNumberish,
      oracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addOracle(uint32,address)"(
      chainId: BigNumberish,
      oracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addValidator(
      chainId: BigNumberish,
      validatorPublicKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addValidator(uint32,bytes)"(
      chainId: BigNumberish,
      validatorPublicKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    get(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "get(uint32)"(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getChainCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOracle(
      chainId: BigNumberish,
      oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isOracle(uint32,address)"(
      chainId: BigNumberish,
      oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidator(
      chainId: BigNumberish,
      validatorPublicKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isValidator(uint32,bytes)"(
      chainId: BigNumberish,
      validatorPublicKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newChain(
      genesis: string,
      validators: BytesLike[],
      oracles: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "newChain(string,bytes[],address[])"(
      genesis: string,
      validators: BytesLike[],
      oracles: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeOracle(
      chainId: BigNumberish,
      idx: BigNumberish,
      oracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeOracle(uint32,uint256,address)"(
      chainId: BigNumberish,
      idx: BigNumberish,
      oracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeValidator(
      chainId: BigNumberish,
      idx: BigNumberish,
      validatorPublicKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeValidator(uint32,uint256,bytes)"(
      chainId: BigNumberish,
      idx: BigNumberish,
      validatorPublicKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGenesis(
      chainId: BigNumberish,
      newGenesis: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setGenesis(uint32,string)"(
      chainId: BigNumberish,
      newGenesis: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
