/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { Results } from "../Results";

export class Results__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    genesisAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Results> {
    return super.deploy(genesisAddr, overrides || {}) as Promise<Results>;
  }
  getDeployTransaction(
    genesisAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(genesisAddr, overrides || {});
  }
  attach(address: string): Results {
    return super.attach(address) as Results;
  }
  connect(signer: Signer): Results__factory {
    return super.connect(signer) as Results__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Results {
    return new Contract(address, _abi, signerOrProvider) as Results;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "genesisAddr",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "processId",
        type: "bytes32",
      },
    ],
    name: "ResultsAvailable",
    type: "event",
  },
  {
    inputs: [],
    name: "genesisAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "processId",
        type: "bytes32",
      },
    ],
    name: "getResults",
    outputs: [
      {
        internalType: "uint32[][]",
        name: "tally",
        type: "uint32[][]",
      },
      {
        internalType: "uint32",
        name: "height",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "processesAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "processesAddr",
        type: "address",
      },
    ],
    name: "setProcessesAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "processId",
        type: "bytes32",
      },
      {
        internalType: "uint32[][]",
        name: "tally",
        type: "uint32[][]",
      },
      {
        internalType: "uint32",
        name: "height",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "vochainId",
        type: "uint32",
      },
    ],
    name: "setResults",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610b98380380610b9883398101604081905261002f916100c8565b60008054336001600160a01b0319909116179055610057816100a1602090811b6104a117901c565b61007c5760405162461bcd60e51b8152600401610073906100f6565b60405180910390fd5b600180546001600160a01b0319166001600160a01b039290921691909117905561012d565b6000806001600160a01b0383166100bc5760009150506100c3565b5050803b15155b919050565b6000602082840312156100d9578081fd5b81516001600160a01b03811681146100ef578182fd5b9392505050565b60208082526013908201527f496e76616c69642067656e657369734164647200000000000000000000000000604082015260600190565b610a5c8061013c6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063133baaa51461005c578063358aad291461007157806346475c4c146100845780636065fb33146100ae5780639d455ad6146100c3575b600080fd5b61006f61006a36600461063e565b6100cb565b005b61006f61007f3660046106a4565b610145565b61009761009236600461068c565b610366565b6040516100a59291906107e3565b60405180910390f35b6100b6610483565b6040516100a591906107cf565b6100b6610492565b6000546001600160a01b031633146100fe5760405162461bcd60e51b81526004016100f5906108a6565b60405180910390fd5b610107816104a1565b6101235760405162461bcd60e51b81526004016100f5906108f4565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6001546040516305525d6160e11b815282916001600160a01b031690630aa4bac29061017790849033906004016109c5565b60206040518083038186803b15801561018f57600080fd5b505afa1580156101a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c7919061066c565b6101e35760405162461bcd60e51b81526004016100f5906109a1565b6002546001600160a01b031661020b5760405162461bcd60e51b81526004016100f59061096a565b600085815260036020526040902060010154640100000000900460ff16156102455760405162461bcd60e51b81526004016100f590610923565b60008363ffffffff161161026b5760405162461bcd60e51b81526004016100f590610948565b6000858152600360209081526040909120855161028a928701906104c8565b5060008581526003602052604090819020600101805464010000000063ffffffff1990911663ffffffff87161764ff00000000191617905560025490516346f32a5d60e11b81526001600160a01b03909116908190638de654ba906102f59089906004908101610888565b600060405180830381600087803b15801561030f57600080fd5b505af1158015610323573d6000803e3d6000fd5b505050507f5aff397e0d9bfad4e73dfd9c2da1d146ce7fe8cfd1a795dbf6b95b417236fa4c86604051610356919061087f565b60405180910390a1505050505050565b60008181526003602052604081206001015460609190640100000000900460ff166103a35760405162461bcd60e51b81526004016100f5906108d1565b600083815260036020908152604080832060018101548154835181860281018601909452808452919463ffffffff909116938592919084015b828210156104745760008481526020908190208301805460408051828502810185019091528181529283018282801561046057602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116104235790505b5050505050815260200190600101906103dc565b50505050915091509150915091565b6001546001600160a01b031681565b6002546001600160a01b031681565b6000806001600160a01b0383166104bc5760009150506104c3565b5050803b15155b919050565b828054828255906000526020600020908101928215610515579160200282015b828111156105155782518051610505918491602090910190610525565b50916020019190600101906104e8565b506105219291506105d0565b5090565b828054828255906000526020600020906007016008900481019282156105c45791602002820160005b8382111561059257835183826101000a81548163ffffffff021916908363ffffffff160217905550926020019260040160208160030104928301926001030261054e565b80156105c25782816101000a81549063ffffffff0219169055600401602081600301049283019260010302610592565b505b506105219291506105ed565b808211156105215760006105e48282610602565b506001016105d0565b5b8082111561052157600081556001016105ee565b50805460008255600701600890049060005260206000209081019061062791906105ed565b50565b803563ffffffff811681146104c357600080fd5b60006020828403121561064f578081fd5b81356001600160a01b0381168114610665578182fd5b9392505050565b60006020828403121561067d578081fd5b81518015158114610665578182fd5b60006020828403121561069d578081fd5b5035919050565b600080600080608085870312156106b9578283fd5b84359350602085013567ffffffffffffffff8111156106d6578384fd5b8501601f810187136106e6578384fd5b6106f86106f38235610a08565b6109e4565b81358152602080820191908301865b843581101561079857813585018b603f820112610722578889fd5b60208101356107336106f382610a08565b80828252602082019150604084018f6040602086028701011115610755578c8dfd5b8c94505b8385101561077f5761076a8161062a565b83526001949094019360209283019201610759565b5087525050602094850194929092019150600101610707565b50508095505050506107ac6040860161062a565b91506107ba6060860161062a565b905092959194509250565b63ffffffff169052565b6001600160a01b0391909116815260200190565b60006040820160408352808551808352606085019150602092506060838202860101838801855b8381101561086357878303605f19018552815180518085529087019087850190895b8181101561084e57835163ffffffff168352928901929189019160010161082c565b5050958701959350509085019060010161080a565b5050809450505050610877818401856107c5565b509392505050565b90815260200190565b828152604081016005831061089957fe5b8260208301529392505050565b60208082526011908201527037b7363ca1b7b73a3930b1ba27bbb732b960791b604082015260600190565b602080825260099082015268139bdd08199bdd5b9960ba1b604082015260600190565b60208082526015908201527424b73b30b634b210383937b1b2b9b9b2b9a0b2323960591b604082015260600190565b6020808252600b908201526a105b1c9958591e481cd95d60aa1b604082015260600190565b6020808252600890820152674e6f20766f74657360c01b604082015260600190565b60208082526018908201527f496e76616c69642070726f636573736573416464726573730000000000000000604082015260600190565b6020808252600a90820152694e6f74206f7261636c6560b01b604082015260600190565b63ffffffff9290921682526001600160a01b0316602082015260400190565b60405181810167ffffffffffffffff81118282101715610a0057fe5b604052919050565b600067ffffffffffffffff821115610a1c57fe5b506020908102019056fea2646970667358221220b885c58d6a2a0d47373441bbf04d03d92b964d959f0458b173c9c397390a2ac664736f6c63430007030033";
